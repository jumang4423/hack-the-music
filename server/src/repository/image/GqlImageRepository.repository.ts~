import ErrStr from "../../domain/ErrStr.domain";
import { Image } from "../../generated/graphql";
import { ImageRepository } from "../../usecase/image/interface/repository.usecase";
import { GetRandomImagesDriver } from "../../drivers/getRandomImages.drivers";
import { GetCollLenDriver } from "../../drivers/getCollLen.drivers";
import { InsertImageDriver } from "../../drivers/insertImage.drivers";
import { ErrsEnumeration } from ".././../util/err.util";

export class GqlImageRepository implements ImageRepository {
  public async getRandomImage(): Promise<[Image | null, ErrStr]> {
    console.log("Hello");

    const [imageGlobalLenCached, err] = await GetCollLenDriver("images");
    if (err) return [null, err];

    // 0 - vle
    const imageFetchIndexies: Array<number> = [];
    imageFetchIndexies.push(Math.floor(Math.random() * imageGlobalLenCached));
    const [randomImage, _, err2] = await GetRandomImagesDriver(
      imageFetchIndexies
    );
    if (err2.IsError()) {
      return [null, err2];
    }

    if (randomImage.length === 0) {
      return [
        null,
        new ErrStr({
          isErr: true,
          errStr: ErrsEnumeration.ENOUGH_IMAGE_INSERTED,
        }),
      ];
    }

    return [randomImage[0], new ErrStr({ isErr: false })];
  }

  public async getRandomImages(count: number): Promise<[Array<Image>, ErrStr]> {
    const [imageGlobalLenCached, err] = await GetCollLenDriver("images");
    if (err.IsError()) {
      return [[], err];
    }
    const imageFetchIndexies: Array<number> = [];
    for (let i = 0; i < count; i++) {
      imageFetchIndexies.push(Math.floor(Math.random() * imageGlobalLenCached));
    }

    const [randomImagesBox, randomImagesIndexies, err2] =
      await GetRandomImagesDriver(imageFetchIndexies);
    if (err2.IsError()) {
      return [[], err2];
    }

    const randomImages: Array<Image> = imageFetchIndexies.map((index) => {
      const imageBoxIndex = randomImagesIndexies.find(
        (imageIndex) => imageIndex === index
      )!;
      return randomImagesBox[imageBoxIndex];
    });

    return [randomImages, new ErrStr({ isErr: false })];
  }

  public async uploadImage(image: Image): Promise<[Image | null, ErrStr]> {
    const [imageGlobalLenCached, err] = await GetCollLenDriver("images");
    if (err.IsError()) {
      return [null, err];
    }
    const [_, err2] = await InsertImageDriver(image, imageGlobalLenCached);
    if (err2.IsError()) {
      return [null, err];
    }
    return [image, new ErrStr({ isErr: false })];
  }
}
